service: auth-server

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-central-1
  timeout: 30
  environment:
    CLIENT_ID: ${file(config.json):CLIENT_ID}
    CLIENT_SECRET: ${file(config.json):CLIENT_SECRET}
    CALENDAR_ID: ${file(config.json):CALENDAR_ID}

functions:
  getAuthURL:
    handler: handler.getAuthURL
    description: "Generate Google OAuth authorization URL"
    events:
      - http:
          path: api/get-auth-url
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Accept
              - Origin
            allowCredentials: false
  getAccessToken:
    handler: handler.getAccessToken
    description: "Exchange authorization code for access token"
    events:
      - http:
          path: api/token/{code}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Accept
              - Origin
            allowCredentials: false
  getCalendarEvents:
    handler: handler.getCalendarEvents
    description: "Get calendar events using access token"
    events:
      - http:
          path: api/get-events/{access_token}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Accept
              - Origin
            allowCredentials: false
  corsPreflightAuthURL:
    handler: handler.corsHandler
    description: "Handle CORS preflight for auth URL endpoint"
    events:
      - http:
          path: api/get-auth-url
          method: options
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Accept
              - Origin
            allowCredentials: false
  corsPreflightToken:
    handler: handler.corsHandler
    description: "Handle CORS preflight for token endpoint"
    events:
      - http:
          path: api/token/{code}
          method: options
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Accept
              - Origin
            allowCredentials: false
  corsPreflightEvents:
    handler: handler.corsHandler
    description: "Handle CORS preflight for events endpoint"
    events:
      - http:
          path: api/get-events/{access_token}
          method: options
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Accept
              - Origin
            allowCredentials: false